			Cache Simulator Notes

* Performance
* Cache simulator
** Design a cache simulator that takes in a memory trace and simulates the behaviour of a real cache
** Cache parameters
*** cache line size (ie. block size)
*** cache size
*** organization
** Cache configuration (from http://cseweb.ucsd.edu/classes/fa07/cse240a/project1.html)
*** line size (in bytes, as a non-negative power of 2)
*** associativity (1 = direct-mapped, 0 = fully associative, 2^N)
*** data size (2^N KB)
*** replacement policy (0 = Random replacement, 1 = LRU)
*** miss penalty (Number of cycles missed on cache misses)
*** TODO write allocate (???) 
** Trace file format (from http://cseweb.ucsd.edu/classes/fa07/cse240a/project1.html)
*** Load or Store
*** Hex address
*** Number of instructions since last memory access
** Keep count of total number of cache accesses
** Report cold, capacity, and conflict misses
** Compare with s = 1 (naive matrix multiplication)
* Memory trace generator
** Given a program, generate its memory trace.
* Matrix multiplication program (size n, blocking factor s)
* Why is block multiplication faster?
** http://www.netlib.org/utk/papers/autoblock/node2.html
* TODO Permutations 
** all caches (4 types)
** write_no_allocate (true/false)
** block_size (1K, 4K, 10K)
** Matrix size (10, ..., 1000, 5000, 10000)
** block size (ie. block factor indirectly)
** ways (1, 4, 16, #blocks in cache)
* TODO Find out where the default accesses end
* TODO Generate matrices of different sizes and put them in files
